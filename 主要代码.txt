#include "debug.h"
#include "ov.h"


/* DVP Work Mode */
#define JPEG_MODE     1
/* DVP Work Mode Selection */
#define DVP_Work_Mode    JPEG_MODE


UINT32  JPEG_DVPDMAaddr0 = 0x20005000;
UINT32  JPEG_DVPDMAaddr1 = 0x20005000 + OV2640_JPEG_WIDTH*2;//每一字节数据实际占两字节RAM

UINT32  RGB565_DVPDMAaddr0 = 0x20005000;
UINT32  RGB565_DVPDMAaddr1 = 0x20005000 + RGB565_COL_NUM;

volatile UINT32 frame_cnt = 0;
volatile UINT32 addr_cnt = 0;
volatile UINT32 href_cnt = 0;

void DVP_IRQHandler (void) __attribute__((interrupt("WCH-Interrupt-fast")));

/*******************************************************************************
* Function Name  : UART2_Send_Byte
* Description    : UART2 send one byte data.
* Input          : t: UART send Data.
* Return         : None
*******************************************************************************/
void UART2_Send_Byte(u8 t)
{
    while (USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);// 等待上次传输完成
    USART_SendData(USART2, t);
}

/*******************************************************************************
* Function Name  : DVP_Init
* Description    : Init DVP
* Input          : None
* Return         : None
*******************************************************************************/
void DVP_Init(void)
{
    NVIC_InitTypeDef NVIC_InitStructure;

    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DVP, ENABLE);// 打开DVP模块的时钟信号

    DVP->CR0 &= ~RB_DVP_MSK_DAT_MOD;// 清除DVP配置寄存器CR0


#if (DVP_Work_Mode == JPEG_MODE)

    DVP->CR0 |= RB_DVP_D10_MOD | RB_DVP_V_POLAR | RB_DVP_JPEG;// 设置DVP的工作模式（10bit位宽)，同步信号极性（低有效的VSYNC信号），打开DVP的JPEG模式
    DVP->CR1 &= ~(RB_DVP_ALL_CLR| RB_DVP_RCV_CLR);// 配置寄存器CR0清除DVP缓存和标志位

    DVP->COL_NUM = OV2640_JPEG_WIDTH;// 设置图片信号宽度

    /* 配置DMA的目标地址 */
    DVP->DMA_BUF0 = JPEG_DVPDMAaddr0;        //DMA addr0
    DVP->DMA_BUF1 = JPEG_DVPDMAaddr1;        //DMA addr1
#endif

    /* 设置DVP帧捕获率 */
    DVP->CR1 &= ~RB_DVP_FCRC;
    DVP->CR1 |= DVP_RATE_25P ;//DVP_RATE_25P;  //25%

    //Interupt Enable
    DVP->IER |= RB_DVP_IE_STP_FRM;
    DVP->IER |= RB_DVP_IE_FIFO_OV;
    DVP->IER |= RB_DVP_IE_FRM_DONE;
    DVP->IER |= RB_DVP_IE_ROW_DONE;
    DVP->IER |= RB_DVP_IE_STR_FRM;

    NVIC_InitStructure.NVIC_IRQChannel = DVP_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);

    DVP->CR1 |= RB_DVP_DMA_EN;  //enable DMA
    DVP->CR0 |= RB_DVP_ENABLE;  //enable DVP
}

u32 DVP_ROW_cnt=0;

/*******************************************************************************
* Function Name  : DVP_IRQHandler
* Description    : This function handles DVP exception.
* Input          : None
* Return         : None
*******************************************************************************/
void DVP_IRQHandler(void)
{
    if (DVP->IFR & RB_DVP_IF_ROW_DONE)
    {
        /* Write 0 clear 0 */
        DVP->IFR &= ~RB_DVP_IF_ROW_DONE;  //clear Interrupt

#if (DVP_Work_Mode == JPEG_MODE)
        href_cnt++;
if (addr_cnt%2)     //buf1 done
        {
            addr_cnt++;
            DVP->DMA_BUF1 += OV2640_JPEG_WIDTH *4;
        }
        else                //buf0 done
        {
            addr_cnt++;
            DVP->DMA_BUF0 += OV2640_JPEG_WIDTH *4;
        }

#endif

    }

    if (DVP->IFR & RB_DVP_IF_FRM_DONE)
    {
        DVP->IFR &= ~RB_DVP_IF_FRM_DONE;  //clear Interrupt

#if (DVP_Work_Mode == JPEG_MODE)
        DVP->CR0 &= ~RB_DVP_ENABLE;       //disable DVP

        //Use uart2 send JPEG data.
        {
            UINT32 i;
            UINT16 val;

            href_cnt = href_cnt*OV2640_JPEG_WIDTH;

            for(i=0; i<href_cnt; i++){
                val = *(UINT16*)(0x20005000+i*2);
                UART2_Send_Byte((UINT8)(val>>2));// | 0xC0);//((val>>4)|(val));
            }

        }

        DVP->CR0 |= RB_DVP_ENABLE;  //enable DVP

        DVP->DMA_BUF0 = JPEG_DVPDMAaddr0;        //DMA addr0
        DVP->DMA_BUF1 = JPEG_DVPDMAaddr1;        //DMA addr1
        href_cnt = 0;

        addr_cnt =0;

#endif

    }

    if (DVP->IFR & RB_DVP_IF_STR_FRM)
    {
        DVP->IFR &= ~RB_DVP_IF_STR_FRM;  //clear Interrupt

        frame_cnt++;
    }

    if (DVP->IFR & RB_DVP_IF_STP_FRM)
    {
        DVP->IFR &= ~RB_DVP_IF_STP_FRM;  //clear Interrupt

    }

    if (DVP->IFR & RB_DVP_IF_FIFO_OV)
    {
        DVP->IFR &= ~RB_DVP_IF_FIFO_OV;   //clear Interrupt

        printf("FIFO OV\r\n");
    }

}


/*******************************************************************************
* Function Name  : main
* Description    : Main program.
* Input          : None PA2 - UART2
* Return         : None
*******************************************************************************/
int main(void)
{
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
	Delay_Init();
	USART_Printf_Init(115200);// 设置UART2的波特率
	printf("SystemClk:%d\r\n",SystemCoreClock);

    while(OV2640_Init())
    {
        printf("Camera Model Err\r\n");
        Delay_Ms(1000);
    }

    Delay_Ms(1000);

    RGB565_Mode_Init();
    Delay_Ms(1000);

#if (DVP_Work_Mode == JPEG_MODE)
    printf("JPEG_MODE\r\n");
    JPEG_Mode_Init();
    Delay_Ms(1000);

#endif

    DVP_Init();

    while(1);
}
# 人脸检测通过在图像上使用Haar Cascade特征检测器来工作。 haar级联是
# 一系列简单的区域对比检查。 对于内置的前表面探测器，有25个阶段的检查，
# 每个阶段有数百个检查一块。 Haar Cascades运行速度很快，因为只有在 
# 以前的阶段过去后才会评估后期阶段。
# 整体图像的数据结构来在恒定时间内快速执行每个区域对比度检查
#（特征检测仅为灰度的原因是因为整体图像的空间需求）。

import sensor, time, image

# 重置感光元件
sensor.reset()

# 感光元件设置
sensor.set_contrast(3)
sensor.set_gainceiling(16)
# HQVGA and GRAYSCALE are the best for face tracking.
# HQVGA和灰度对于人脸识别效果最好
sensor.set_framesize(sensor.HQVGA)
sensor.set_pixformat(sensor.GRAYSCALE)
#注意人脸识别只能用灰度图哦

# 加载Haar算子
# 默认情况下，这将使用所有阶段，更低的satges更快，但不太准确。
face_cascade = image.HaarCascade("frontalface", stages=25)
#image.HaarCascade(path, stages=Auto)加载一个haar模型。haar模型是二进制文件，
#这个模型如果是自定义的，则引号内为模型文件的路径；也可以使用内置的haar模型，
#比如“frontalface” 人脸模型或者“eye”人眼模型。
#stages值未传入时使用默认的stages。stages值设置的小一些可以加速匹配，但会降低准确率。
print(face_cascade)

# FPS clock
clock = time.clock()

while (True):
    clock.tick()

    # 拍摄一张照片
    img = sensor.snapshot()

    # Find objects.
    # Note: Lower scale factor scales-down the image more and detects smaller objects.
    # Higher threshold results in a higher detection rate, with more false positives.
    objects = img.find_features(face_cascade, threshold=0.75, scale=1.35)
    #image.find_features(cascade, threshold=0.5, scale=1.5),thresholds越大，
    #匹配速度越快，错误率也会上升。scale可以缩放被匹配特征的大小。

    #在找到的目标上画框，标记出来
    for r in objects:
        img.draw_rectangle(r)

    # 打印FPS。
    # 注：实际FPS更高，流FB使它更慢。
    print(clock.fps())
